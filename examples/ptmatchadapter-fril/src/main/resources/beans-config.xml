<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
  ">


  <bean id="fhirContext" class="ca.uhn.fhir.context.FhirContext"
    factory-method="forDstu2Hl7Org" />

  <bean id="fhirRestClientFactory" factory-bean="fhirContext"
    factory-method="getRestfulClientFactory">
    <property name="serverValidationMode">
      <value type="ca.uhn.fhir.rest.client.ServerValidationModeEnum">NEVER</value>
    </property>
  </bean>

  <bean id="fhirRestClient" factory-bean="fhirRestClientFactory"
    factory-method="newGenericClient">
   <!-- URL string to the server from which to request messages. 
        Include scheme, host name + port + root path -->
    <constructor-arg value="${src.fhir.server.base}" />
  </bean>

  <!-- The classes that use the REST Client may add/remove Interceptors.
      When they share the REST client, this can result in conditions that result
      in a ConcurrentModificationException.  So, give retriever and sender
      their own clients. -->
  <bean id="fhirRestClient2" factory-bean="fhirRestClientFactory"
    factory-method="newGenericClient">
   <!-- URL string to the server from which to request messages. 
        Include scheme, host name + port + root path -->
    <constructor-arg value="${src.fhir.server.base}" />
  </bean>

  <bean id="msgRetriever" class="org.mitre.ptmatchadapter.MessageRetriever">
    <property name="client" ref="fhirRestClient" />
    <property name="destinationUri" value="${ptmatchadapter.uri}" />
    <property name="period" value="${msgRetriever.period}" />
  </bean>

  <bean id="duplicateMessageFilter" class="org.mitre.ptmatchadapter.DuplicateMessageFilter">
  </bean>

  <bean id="recordMatchRequestAccepter" class="org.mitre.ptmatchadapter.RecordMatchRequestAccepter" />

  <bean id="recordMatchRequestPassFilter" class="org.mitre.ptmatchadapter.RecordMatchRequestPassFilter" />

  <bean id="searchResultSplitter" class="org.mitre.ptmatchadapter.SearchResultSplitter" />


  <bean id="requestHandler" 
      class="org.mitre.ptmatchadapter.fril.RecordMatchRequestProcessor">
    <property name="producerEndpointUri" value="seda:msgOutbox" />
    <property name="producer" ref="producerTemplate" />
    <property name="fhirRestClient" ref="fhirRestClient2" />
    <property name="workDir" value="${ptmatchadapter.workDir}" />
    <property name="deduplicationTemplate" value="${ptmatchadapter.deduplicationTemplate}" />
    <property name="deleteJobResults" value="${ptmatchadapter.deleteJobResults}" />
  </bean>

  <bean id="acknowledgmentBuilder" 
      class="org.mitre.ptmatchadapter.recordmatch.AcknowledgmentBuilder">
    <property name="sourceName" value="${ptmatchadapter.name}" />
    <property name="sourceEndpointUri" value="${ptmatchadapter.uri}" />
  </bean>

  <bean id="resultSender" class="org.mitre.ptmatchadapter.ResultSender">
    <property name="client" ref="fhirRestClient" />
  </bean>


  <bean id="  resourceSerializer" class="org.mitre.ptmatchadapter.util.ResourceSerializer">
    <constructor-arg name="fhirContext" ref="fhirContext" />
    <property name="format" value="json" />
    <property name="prettyPrint" value="true" />
  </bean>
  
  <bean id="adapterConfiguration" class="org.mitre.ptmatchadapter.gui.AdapterConfiguration">
  </bean>
  
  <bean id="webResource" class="org.eclipse.jetty.util.resource.Resource"
    factory-method="newClassPathResource" >
    <constructor-arg value="/www" />
    <!-- constructor-arg value="/dist" / -->
  </bean>

 <util:list id="welcomeFiles">
   <value>index.html</value>
 </util:list>

  <bean id="staticPageHandler" class="org.eclipse.jetty.server.handler.ResourceHandler">
    <property name="baseResource" ref="webResource"/>    
    <property name="directoriesListed" value="true" />
    <property name="welcomeFiles" ref="welcomeFiles" />
  </bean>
  
  <util:list id="serverAuthorizations" list-class="java.util.ArrayList"/>

  <util:map id="oauthSessionStateMap" map-class="java.util.HashMap"/>
   
  <bean id="serverAuthorizationService" 
      class="org.mitre.ptmatchadapter.service.ServerAuthorizationService">
    <property name="serverAuthorizations" ref="serverAuthorizations"/>
    <property name="authorizationServer" value="${oauth2.authorization.server}" />
    <property name="authorizationEndpoint" value="${oauth2.authorization.authCodeEndpoint}" />
    <property name="accessTokenEndpoint" value="${oauth2.authorization.accessTokenEndpoint}" />
    <property name="clientId" value="${ptmatchadapter.oauth2.clientID}" />
    <property name="clientSecret" value="${ptmatchadapter.oauth2.clientSecret}" />
    <property name="sessionData" ref="oauthSessionStateMap" />
  </bean>
  
  <bean id="formProcService" 
      class="org.mitre.ptmatchadapter.service.FormProcessorService" />
  
  <!-- Jolokia JVM Agent Configuration
    See https://jolokia.org/reference/html/jmx.html#jvm-spring
   -->
  <bean name="jolokiaSvr" id="jolokia" 
      class="org.jolokia.jvmagent.spring.SpringJolokiaAgent">
    <property name="lookupConfig" value="false"/>
    <property name="systemPropertiesMode" value="never"/>
    <property name="config">
      <bean class="org.jolokia.jvmagent.spring.SpringJolokiaConfigHolder">
        <property name="config">
          <util:map>
            <entry key="autoStart" value="true"/>
            <entry key="host" value="0.0.0.0"/>
            <entry key="port" value="8778"/>
          </util:map>
        </property>
      </bean>
    </property>
  </bean>
</beans>
